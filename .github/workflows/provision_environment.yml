name: Provision Environment on Issue Open
run-name: Provision Environment on Issue ${{ github.event.issue.number }} for ${{ github.actor }}
on:
  issues:
    types: [opened]

jobs:
  provision:
    if: |
      contains(github.event.issue.labels.*.name, 'environment-request') && (
        contains(github.event.issue.labels.*.name, 'aks') ||
        contains(github.event.issue.labels.*.name, 'app-service')
      )
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read

    steps:
      - name: Determine Environment Requested
        id: get-env
        run: |
          if [[ "${{ github.event.issue.labels[*].name }}" == *"aks"* ]]; then
            echo "environment=aks" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.issue.labels[*].name }}" == *"app-service"* ]]; then
            echo "environment=app-service" >> $GITHUB_OUTPUT
          fi

      - name: Echo Environment Requested
        run: |
          echo "Requested environment: ${{ steps.get-env.outputs.environment }}"
  
      - name: Comment on the Issue
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const result = await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `⚙️ Provisioning **${{ steps.get-env.outputs.environment }}** dev environment...`
            })
        
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Set up Azure CLI with Azure Login v2
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Parse Issue Details
        id: parse_issue
        run: |
          body="${{ github.event.issue.body }}"
          app_name=$(echo "$body" | awk '/>>app_name<</{getline; getline; print}')
          region=$(echo "$body" | awk '/>>region<</{getline; getline; print}')
          additional_notes=$(echo "$body" | awk '/>>additional_notes<</{getline; getline; print}')
          echo "app_name=$app_name" >> $GITHUB_ENV
          echo "region=$region" >> $GITHUB_ENV
          if [[ -z "$app_name" || -z "$region" ]]; then
            echo "Error: Failed to parse issue details." >&2
            exit 1
          fi
      
          unique_id="${{ github.event.issue.number }}-$(date +%s)"
          resource_group_name="env-$app_name-$unique_id-rg"

          echo "unique_id=$unique_id" >> $GITHUB_ENV
          echo "resource_group_name=$resource_group_name" >> $GITHUB_ENV
          echo "additional_notes=$additional_notes" >> $GITHUB_ENV

      - name: Create Resource Group with Tags
        run: |
          az group create --name "${{ env.resource_group_name }}" --location "${{ env.region }}" \
            --tags "Created by=${{ github.actor }}" \
                   "Issue ID=https://github.com/${{ github.repository }}/issues/${{ github.event.issue.number }}" \
                   "Creation time=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
                   "App=${{ env.app_name }}" \
                   "Environment=${{ steps.get-env.outputs.environment }} Dev Environment"
               
      - name: Deploy ARM Template
        id: deploy
        uses: azure/arm-deploy@v2
        with:
          resource-group: ${{ env.resource_group_name }}
          template: ./infra/${{ steps.get-env.outputs.environment }}-template.json
          parameters: |
            location=${{ env.region }}
            uniqueId=${{ env.unique_id }}
          deploymentName: ${{ github.actor }}-${{ steps.get-env.outputs.environment }}-deployment

      - name: Capture ARM Template Outputs
        id: capture_outputs
        run: |
          echo "outputs=$(echo '${{ toJson(steps.deploy.outputs) }}')" >> $GITHUB_ENV

      - name: Comment on Issue to Indicate Completion
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const runUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
            const outputs = JSON.parse(process.env.outputs);
            const outputEntries = Object.entries(outputs).map(([key, value]) => `${key}: ${value}`).join('\\n');
            const comment = `✅ Demo Environment request processing completed...\\n\\nResource group name: \`${{ env.resource_group_name }}\`\\nOutputs:\\n${outputEntries}\\n\\ncc: @${{ github.actor }}`;
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });